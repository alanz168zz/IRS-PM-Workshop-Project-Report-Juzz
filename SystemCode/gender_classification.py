# -*- coding: utf-8 -*-
"""Gender Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J0xWA1RfuM_G181lHGBryfFyRjoWDXW9
"""

from google.colab import drive 
drive.mount('/content/drive')

# EDA package
import pandas as pd
import numpy as np

# ML packages
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction import DictVectorizer
#from sklearn.feature_extraction.text import TfidfVectorizer

# Load the dataset
df = pd.read_csv('drive/My Drive/JuzzChatBot/100names.csv')

df.size

#Data Cleaning
# Check for column name consistency
df.columns

#Data types
df.dtypes

# Check for missing values
df.isnull().isnull().sum()

# Number of female names
df[df.sex == 'female'].size

# Number of Male names
df[df.sex == 'male'].size

df_name = df

#Replacing all female and male with 0 and 1 
df_name.sex.replace({'female':0,'male':1}, inplace=True)

df_name.sex.unique()

df_name.dtypes

Xfeatures = df_name['names']

# Feature Extraction
cv = CountVectorizer()
X = cv.fit_transform(Xfeatures)

cv.get_feature_names()

from sklearn.model_selection import train_test_split

#Features
X
#Labels
y = df_name.sex

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33,random_state = 42)

# Naive Baynes Classifier is used because it does not require large dataset and juzz only gives us 100 dataset. It is fast and can make real time classifier
from sklearn.naive_bayes import MultinomialNB
clf = MultinomialNB()
clf.fit(X_train,y_train)
clf.score(X_test,y_test)

# Accuracy of our model
print("Accuracy of Model",clf.score(X_test,y_test)*100,"%")

#Accuracy of our model
print("Accuracy of model", clf.score(X_train,y_train)*100,"%")

#Sample1 Prediction
sample_name = ["Mark"]
vect =cv.transform(sample_name).toarray()

#Female is 0, Male is 1
clf.predict(vect)

# Sample2 Prediction
sample_name1 =["Peter"]
vect2 =cv.transform(sample_name1).toarray()

#Female is 0, Male is 1
clf.predict(vect2)

# Sample3 Prediction
sample_name2 =["Jessie"]
vect3 =cv.transform(sample_name2).toarray()

#Female is 0, Male is 1
clf.predict(vect3)

!pip install --upgrade gspread

from google.colab import auth
auth.authenticate_user()

import gspread
from google.auth import default
creds, _ = default()

gc = gspread.authorize(creds)

wb = gc.open_by_key('1akpkCKVR1rcAYYQwQNVxMUdvkOBEj7u35Sa3rG5543E')

# Sample3 Prediction of Random Names
sample_name3 = ["Nefertiti","Nasha","Ama","Ayo","Xhavier","Ovetta","Tathiana","Xia","Joseph","Xianliang"]
vect3 = cv.transform(sample_name3).toarray()

clf.predict(vect3)

# A function to do it
def genderpredictor(a):
    data_set = [a]
    vector = cv.transform(data_set).toarray()
    if clf.predict(vector) == 0:
        print("Female")
    else:
        print("Male")

namelist = ["Yaa","Yaw","Femi","Masha"]
for i in namelist:
    print(genderpredictor(i))

# Predicting the gender in new dataset in csv under "Contacts sheet"
namelist = ["Alex Lee","Loh Lee Chin","Shell Nee toh","Sharon neo","Jaslyn wee","New Wee Keong","Samuel Hourong","Angeline Long","Chew Speacor","Low Fong Moi","Jiancon Fong",
"Ling Ling Chai","Audrey Wu","Choon Seong Lim","Max Sum","Wai Yee Choo","Beiqing Zhao","Bernard Chong","Mun Bryan","Vicki Ding","Simon Chang","Yan Xion","Sze Ling Ng","Danru Wen",
"Karen Tham","Lim Yong Chang","Tan Hui Leng","Chiou Pey Leong","Beng Hon Wee","Adrian yu Hung Wei","Susan Zhao","Lydia Liu","Chin han chung","Ying Chai Lee","Thng Kok Meng","Tiffany Dong",
"Mun Hong Yuen","Karl Chandran","Bruno Sng","Chong Yang Sng","Yi Fan Tan","Kah Hui Chng","Cheng Sook Fen","Clyn Koh","Julian Elisa Alimin","Shu Chin Lau","Brynn Ting",
"Therasa Chang","Tee Bee Chin","Wei Long","Benny Tan","Sharmanie Tan","Ng Wan Ting","Choon Siang Chua","Ling Ing Choo","Jamie Loh","Shaun Tan","Hiang Chye Chang","Kelvin Wong",
"Fany Fong Yin Kiew","Terence Cheng","Jong Soon Kai","Chia Lim","Kai Jun Yeo","Xamioming Sun","Lee Fang Tan","Chrysun Zapata","Cynthia Goh","Yu lily Chen","Kim Peng Lee","Chan Felicia",
"Grace Yang","Jasmine Chong","Amanda Lim","Shermaine Tan","Jimmy Woon","Albert Ong","Jia Hann Tan","Chia Nancy","Vivian Fong","Eddie Lim","Shiqi Liang","Teh Tit Hean",
"Phua Huat","Chi Ling Kong","Tay Catherine","Lee Sharine","Lim Mei Ping","Stanly Yong","Jianhua Weng","Ng Sau Kheng","Eveline Yip","Pui Lee Tong","Samantha Wong","Guo Wanping",
"Aaron Poh","Joseph Eng","Rachael Lo","Joanne Goh","Hai Chew Ng",]
for i in namelist:
    print(genderpredictor(i))

genderpredictor("Nicole")

ws = wb.worksheet('100names')

# get_all_values gives a list of rows.
rows = ws.get_all_values()
print(rows)

# Convert to a DataFrame and render.
#import pandas as pd
df100names=pd.DataFrame.from_records(rows[1:],columns=rows[0])
print(df100names)

wsContacts = wb.worksheet('Contacts')

# get_all_values gives a list of rows.
contactListofLists = wsContacts.get_all_values()

# Convert to a DataFrame and render.
dfContacts = pd.DataFrame.from_records(contactListofLists[1:],columns=contactListofLists[0])
print(dfContacts)

wsResult = wb.worksheet('Results')
# wsResult.update(none,dataToWrite)

from google.colab import drive
drive.mount('/content/drive')
df = pd.read_csv('drive/My Drive/JuzzChatBot/Contacts.csv')  # read predict file
namelist = []
results = []
 for i in range(df['name']):
  namelist.append(i)
  name= genderpredictor(i)
  results.append(name)

dataframe = pd.DataFrame({'name':namelist,'sex':results}) 
dataframe.to_csv("drive/My Drive/JuzzChatBot/Results.csv") # read output file